[{"title":"RemoteSignal","type":0,"sectionRef":"#","url":"/Cardinal/api/RemoteSignal","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RemoteSignal","url":"/Cardinal/api/RemoteSignal#functions","content":" "},{"title":"new​","type":1,"pageTitle":"RemoteSignal","url":"/Cardinal/api/RemoteSignal#new","content":"&lt;/&gt; RemoteSignal.new( Net: ServerNet | ClientNet, Name: string ) → RemoteSignal Creates a new RemoteSignal object.  "},{"title":"Connect​","type":1,"pageTitle":"RemoteSignal","url":"/Cardinal/api/RemoteSignal#Connect","content":"&lt;/&gt; RemoteSignal:Connect(Callback: (...any) → ()) → RBXScriptConnection  Connects a function to the signal.  "},{"title":"Fire​","type":1,"pageTitle":"RemoteSignal","url":"/Cardinal/api/RemoteSignal#Fire","content":"This item only works when running on the server. Server &lt;/&gt; RemoteSignal:Fire( Players: Player | {Player }, ...: any ) → nil Fires the signal to the specified players.  "},{"title":"FireAll​","type":1,"pageTitle":"RemoteSignal","url":"/Cardinal/api/RemoteSignal#FireAll","content":"This item only works when running on the server. Server &lt;/&gt; RemoteSignal:FireAll(...: any) → nil Fires the signal to all players.  "},{"title":"FireAllExcept​","type":1,"pageTitle":"RemoteSignal","url":"/Cardinal/api/RemoteSignal#FireAllExcept","content":"This item only works when running on the server. Server &lt;/&gt; RemoteSignal:FireAllExcept( Players: Player | {Player }, ...: any ) → nil Fires the signal to all players except the ones specified.  "},{"title":"Fire​","type":1,"pageTitle":"RemoteSignal","url":"/Cardinal/api/RemoteSignal#Fire","content":"This item only works when running on the client. Client &lt;/&gt; RemoteSignal:Fire(...: any) → nil Fires the signal to the specified players. "},{"title":"RemoteProperty","type":0,"sectionRef":"#","url":"/Cardinal/api/RemoteProperty","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RemoteProperty","url":"/Cardinal/api/RemoteProperty#functions","content":" "},{"title":"new​","type":1,"pageTitle":"RemoteProperty","url":"/Cardinal/api/RemoteProperty#new","content":"&lt;/&gt; RemoteProperty.new( Net: ServerNet | ClientNet, Name: string, InitialValue: any ) → RemoteProperty Creates a new RemoteProperty object.  "},{"title":"Observe​","type":1,"pageTitle":"RemoteProperty","url":"/Cardinal/api/RemoteProperty#Observe","content":"This item only works when running on the server. Server &lt;/&gt; RemoteProperty:Observe(Callback: ( Player , ...any ) → ()) → RBXScriptConnection  Connects a function to the signal.  "},{"title":"Observe​","type":1,"pageTitle":"RemoteProperty","url":"/Cardinal/api/RemoteProperty#Observe","content":"This item only works when running on the client. Client &lt;/&gt; RemoteProperty:Observe(Callback: (...any) → ()) → RBXScriptConnection  Connects a function to the signal.  "},{"title":"SetFor​","type":1,"pageTitle":"RemoteProperty","url":"/Cardinal/api/RemoteProperty#SetFor","content":"This item only works when running on the server. Server &lt;/&gt; RemoteProperty:SetFor( Players: Player | {Player }, Value: any ) → nil Sets the value of the property for the specified players.  "},{"title":"Set​","type":1,"pageTitle":"RemoteProperty","url":"/Cardinal/api/RemoteProperty#Set","content":"This item only works when running on the server. Server &lt;/&gt; RemoteProperty:Set(Value: any) → nil Sets the value of the property for all players.  "},{"title":"GetFor​","type":1,"pageTitle":"RemoteProperty","url":"/Cardinal/api/RemoteProperty#GetFor","content":"This item only works when running on the server. Server &lt;/&gt; RemoteProperty:GetFor(Player: Player ) → any Sets the value of the property for all players. "},{"title":"Cardinal","type":0,"sectionRef":"#","url":"/Cardinal/api/Cardinal","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Cardinal","url":"/Cardinal/api/Cardinal#functions","content":" "},{"title":"Load​","type":1,"pageTitle":"Cardinal","url":"/Cardinal/api/Cardinal#Load","content":"&lt;/&gt; Cardinal.Load( Parent:: Instance , LoadOptions:: { Deep: boolean?, Predicate: ((ModuleScript ) → boolean)?, Exclusions: {string}? }? ) → Promise&lt;string&gt; Loads a ModuleScript into the Loader. LoadOptions: Deep is an optional boolean that will determine if the Loader should load all ModuleScripts in the Parent's descendants. Predicate is an optional function that will be used to determine if the ModuleScript should be loaded. Exclusions is an optional table of strings that will be used to exclude certain ModuleScripts from being loaded.  "},{"title":"Start​","type":1,"pageTitle":"Cardinal","url":"/Cardinal/api/Cardinal#Start","content":"&lt;/&gt; Cardinal.Start(Options:: {ServicePromise: boolean?}?) → Promise&lt;string&gt; Starts the Loader, initializing and starting all services/controllers. Options: ServicePromise is an optional boolean that will determine if the client callback functions should return a Promise.  "},{"title":"GetService​","type":1,"pageTitle":"Cardinal","url":"/Cardinal/api/Cardinal#GetService","content":"This item only works when running on the client. Client &lt;/&gt; Cardinal.GetService(Name:: string) → table | nil Gets a service from the Loader by name (client only, and case sensitive).  "},{"title":"CreateSignal​","type":1,"pageTitle":"Cardinal","url":"/Cardinal/api/Cardinal#CreateSignal","content":"&lt;/&gt; Cardinal.CreateSignal() → SignalFlag Flags that a new &quot;Remote&quot; Signal should be made  "},{"title":"CreateProperty​","type":1,"pageTitle":"Cardinal","url":"/Cardinal/api/Cardinal#CreateProperty","content":"&lt;/&gt; Cardinal.CreateProperty() → SignalFlag Flags that a new &quot;Remote&quot; Signal should be made  "},{"title":"OnStart​","type":1,"pageTitle":"Cardinal","url":"/Cardinal/api/Cardinal#OnStart","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Cardinal.OnStart() → Promise&lt;nil&gt; Waits for the Loader to start.  "},{"title":"AddCustomLifecycle​","type":1,"pageTitle":"Cardinal","url":"/Cardinal/api/Cardinal#AddCustomLifecycle","content":"&lt;/&gt; Cardinal.AddCustomLifecycle( Name:: string, Signal:: any ) → () Adds a custom lifecycle event to the Loader. This will allow you to add custom events that can be used in your services/controllers. "},{"title":"Service","type":0,"sectionRef":"#","url":"/Cardinal/api/Service","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#properties","content":" "},{"title":"Client?​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#Client?","content":"&lt;/&gt; Service.Client?: {[string]: ( self: self, Player: Player , ... ) → nil | () → nil} | nil  "},{"title":"Functions​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#functions","content":" "},{"title":"OnInit?​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#OnInit?","content":"&lt;/&gt; Service:OnInit?() → () Fires when the Service is initialized.  "},{"title":"OnStart?​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#OnStart?","content":"&lt;/&gt; Service:OnStart?() → () Fires when the Service is Started.  "},{"title":"OnPlayerAdded?​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#OnPlayerAdded?","content":"&lt;/&gt; Service:OnPlayerAdded?() → () Fires when a Player is added.  "},{"title":"OnPlayerRemoving?​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#OnPlayerRemoving?","content":"&lt;/&gt; Service:OnPlayerRemoving?() → () Fires when a Player is removed.  "},{"title":"OnCharacterAdded?​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#OnCharacterAdded?","content":"&lt;/&gt; Service:OnCharacterAdded?( Character: Instance , Player: Player ) → () Fires when a Character is added.  "},{"title":"OnStepped?​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#OnStepped?","content":"&lt;/&gt; Service:OnStepped?( ElapsedTime: number, DeltaTime: number ) → () Fires when the Stepped event is fired.  "},{"title":"OnHeartbeat?​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#OnHeartbeat?","content":"&lt;/&gt; Service:OnHeartbeat?(DeltaTime: number) → () Fires when the Heartbeat event is fired.  "},{"title":"OnPreAnimation?​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#OnPreAnimation?","content":"&lt;/&gt; Service:OnPreAnimation?(DeltaTime: number) → () Fires when the PreAnimation event is fired.  "},{"title":"OnPreSimulation?​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#OnPreSimulation?","content":"&lt;/&gt; Service:OnPreSimulation?(DeltaTime: number) → () Fires when the PreSimulation event is fired.  "},{"title":"OnPostAnimation?​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#OnPostAnimation?","content":"&lt;/&gt; Service:OnPostAnimation?(DeltaTime: number) → () Fires when the PostAnimation event is fired.  "},{"title":"OnPostSimulation?​","type":1,"pageTitle":"Service","url":"/Cardinal/api/Service#OnPostSimulation?","content":"&lt;/&gt; Service:OnPostSimulation?(DeltaTime: number) → () Fires when the PostSimulation event is fired. "},{"title":"Controller","type":0,"sectionRef":"#","url":"/Cardinal/api/Controller","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#functions","content":" "},{"title":"OnInit​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnInit","content":"&lt;/&gt; Controller:OnInit() → () Fires when the Controller is initialized.  "},{"title":"OnStart​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnStart","content":"&lt;/&gt; Controller:OnStart() → () Fires when the Controller is Started.  "},{"title":"OnPlayerAdded​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnPlayerAdded","content":"&lt;/&gt; Controller:OnPlayerAdded(Player: Player ) → () Fires when a Player is added.  "},{"title":"OnPlayerRemoving​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnPlayerRemoving","content":"&lt;/&gt; Controller:OnPlayerRemoving(Player: Player ) → () Fires when a Player is removed.  "},{"title":"OnCharacterAdded​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnCharacterAdded","content":"&lt;/&gt; Controller:OnCharacterAdded( Character: Instance , Player: Player ) → () Fires when a Character is added.  "},{"title":"OnLocalPlayer​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnLocalPlayer","content":"&lt;/&gt; Controller:OnLocalPlayer(Player: Player ) → () Fires when the local player is added.  "},{"title":"OnLocalCharacter​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnLocalCharacter","content":"&lt;/&gt; Controller:OnLocalCharacter( Character: Instance , Player: Player ) → () Fires when the local player has a Character added.  "},{"title":"OnStepped​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnStepped","content":"&lt;/&gt; Controller:OnStepped( ElapsedTime: number, DeltaTime: number ) → () Fires when the Stepped event is fired.  "},{"title":"OnRenderStepped​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnRenderStepped","content":"&lt;/&gt; Controller:OnRenderStepped(DeltaTime: number) → () Fires when the RenderStepped event is fired.  "},{"title":"OnHeartbeat​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnHeartbeat","content":"&lt;/&gt; Controller:OnHeartbeat(DeltaTime: number) → () Fires when the Heartbeat event is fired.  "},{"title":"OnPreAnimation​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnPreAnimation","content":"&lt;/&gt; Controller:OnPreAnimation(DeltaTime: number) → () Fires when the PreAnimation event is fired.  "},{"title":"OnPreSimulation​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnPreSimulation","content":"&lt;/&gt; Controller:OnPreSimulation(DeltaTime: number) → () Fires when the PreSimulation event is fired.  "},{"title":"OnPostAnimation​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnPostAnimation","content":"&lt;/&gt; Controller:OnPostAnimation(DeltaTime: number) → () Fires when the PostAnimation event is fired.  "},{"title":"OnPostSimulation​","type":1,"pageTitle":"Controller","url":"/Cardinal/api/Controller#OnPostSimulation","content":"&lt;/&gt; Controller:OnPostSimulation(DeltaTime: number) → () Fires when the PostSimulation event is fired. "}]